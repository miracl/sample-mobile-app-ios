participant mobapp
participant mobsdk
participant mfa
participant appbe
participant besdk
mobapp->mobsdk: SetClientId(<clientId>)
mobapp->mobsdk: SetBackend(<url>)
mobsdk->appbe: SetBackend(<url>)
appbe->mobsdk: Status OK
mobsdk->mobapp: Status OK
mobapp->mobsdk: ListUsers(<users-list>)
note right of mobapp
	NOTE: The diagram assumes that there is a completed registration. 
	The registration flow is listed separately.
end note
mobsdk->mobapp: <users-list>
mobapp->mfa: GET /authzurl
mfa->mobapp: accessCode
mobapp->mobsdk: StartAuthentication(<user>, <accessCode>)
mobsdk->mfa: POST /codeStatus, data: {"status": "user", "wid": <access-code>, "userId": <identity>}
mfa-->mobsdk: OK
mobsdk<-->mfa: Fetch Time Permits, if required
mobsdk->mobapp: OK
mobapp->mobapp: Get PIN from end-user
mobapp->mobsdk: FinishAuthenticationMFA(user, PIN, &authzCode)
mobsdk<->mfa: Authentication Pass 1, header: X-MIRACL-Client-ID: <clientId>
mobsdk->mfa: Authentication Pass 2, header: X-MIRACL-Client-ID: <clientId>
mfa-->mobsdk: OK, data: authOTT
mobsdk->mfa: POST /authenticate, header: X-MIRACL-Client-ID: <clientId>, data: authOTT
mfa-->mobsdk: OK, data: {"code": <authzCode>}
mobsdk-->mobapp: Status OK, authzCodea
mobapp->appbe: App-sepcific request for data or for authentication validation, pass <userId>, <authzCode>
appbe->besdk: validate_authorization(), passing in <authzCode>
besdk->mfa: Token Endpoint, passing <authzCode>
mfa-->besdk: Access Token, ID Token
besdk->besdk: Validate ID Token
besdk-->appbe: Access Token
appbe->besdk: get_user_id()
besdk-->appbe: User ID
appbe->appbe: Verify User ID == <userId>
appbe->appbe: (Optional) Generate app-specific Authentication Token
appbe-->mobapp: App-specific response, pass back either\nAccess Token or app-specific Authentication Token
mobapp<->appbe: Get data using provided Token